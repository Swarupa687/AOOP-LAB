import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

public class FileOperations {

    public static void createFile(String filepath) {
        try {
            new File(filepath).createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void writeToFile(String filepath, String content) {
        try (FileWriter writer = new FileWriter(filepath)) {
            writer.write(content);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String readFromFile(String filepath) {
        try {
            return new String(Files.readAllBytes(Paths.get(filepath)));
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void appendToFile(String filepath, String content) {
        try (FileWriter writer = new FileWriter(filepath, true)) {
            writer.write(content);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void deleteFile(String filepath) {
        File file = new File(filepath);
        if (file.exists()) {
            file.delete();
        }
    }
}

public class DirectoryOperations {

    public static void createDirectory(String dirpath) {
        new File(dirpath).mkdirs();
    }

    public static List<String> listDirectoryContents(String dirpath) {
        File dir = new File(dirpath);
        String[] contents = dir.list();
        return contents != null ? Arrays.asList(contents) : null;
    }

    public static boolean directoryExists(String dirpath) {
        File dir = new File(dirpath);
        return dir.exists() && dir.isDirectory();
    }

    public static void deleteDirectory(String dirpath) {
        File dir = new File(dirpath);
        if (dir.exists()) {
            dir.delete();
        }
    }

    public static void renameDirectory(String oldDirpath, String newDirpath) {
        File oldDir = new File(oldDirpath);
        File newDir = new File(newDirpath);
        oldDir.renameTo(newDir);
    }
}